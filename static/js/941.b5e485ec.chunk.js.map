{"version":3,"file":"static/js/941.b5e485ec.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"inputContact\":\"ContactForm_inputContact__ylxPW\",\"labelForm\":\"ContactForm_labelForm__DEnf8\",\"buttonForm\":\"ContactForm_buttonForm__RQPsC\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilterStatus = state => state.filter.status;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectFilterStatus],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  function handleFormatPhoneNumber(phoneNumber) {\n    if (typeof phoneNumber !== 'string') {\n      return phoneNumber;\n    }\n\n    var formattedNumber = '';\n\n    for (var i = 0; i < phoneNumber.length; i++) {\n      if (i !== 0 && i % 3 === 0) {\n        formattedNumber += '-';\n      }\n\n      formattedNumber += phoneNumber[i];\n    }\n\n    return formattedNumber;\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name = form.name.value;\n    const phone = form.number.value;\n\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (existingContact) {\n      alert(`${name} already in contacts!`);\n      return;\n    }\n    const user = {\n      name,\n      phone: handleFormatPhoneNumber(phone),\n    };\n    dispatch(addContact(user));\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={clsx(css.contactForm)}>\n        <label className={clsx(css.labelForm)}>\n          Name\n          <input\n            className={clsx(css.inputContact)}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={clsx(css.labelForm)}>\n          Number\n          <input\n            className={clsx(css.inputContact)}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\d{1,4}?\\d{1,3}?\\d{1,4}\\d{1,4}\\d{1,9}\"\n            title=\"Phone number must be digits\"\n            maxLength={11}\n            required\n          />\n        </label>\n        <button className={clsx(css.buttonForm)}>Add contact</button>\n      </form>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"Contact_contactListItem__++ahj\",\"contactListBtn\":\"Contact_contactListBtn__ohcvy\"};","import clsx from 'clsx';\nimport css from './Contact.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <li\n      className={clsx(css.contactListItem)}\n      key={contact.id}\n      name={contact.name}\n    >\n      <span>\n        {contact.name}: {contact.phone}\n      </span>\n      <button className={clsx(css.contactListBtn)} onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport css from './ContactList.module.css';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { selectFilterContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilterContacts);\n\n  const memoContacts = useMemo(() => contacts, [contacts]);\n\n  return (\n    <ul className={clsx(css.contactList)}>\n      {memoContacts.map(contact => (\n        <Contact contact={contact} />\n      ))}\n    </ul>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport clsx from 'clsx';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filter/filterSlice';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleInput = event => {\n    const inputValue = event.target.value;\n    dispatch(setStatusFilter(inputValue));\n  };\n\n  return (\n    <>\n      <div className={clsx(css.filter)}>\n        <label>Search contacts</label>\n        <input\n          className={clsx(css.filterInput)}\n          onChange={handleInput}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { ColorRing } from 'react-loader-spinner';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && (\n        <ColorRing\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"blocks-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"blocks-wrapper\"\n          colors={['#b8c480', '#B2A3B5', '#F4442E', '#51E5FF', '#429EA6']}\n        />\n      )}\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectError","error","selectIsLoading","isLoading","selectFilterContacts","createSelector","filter","status","contact","name","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","handleFormatPhoneNumber","phoneNumber","formattedNumber","i","length","onSubmit","event","preventDefault","form","currentTarget","value","phone","number","find","alert","user","addContact","reset","className","clsx","css","type","pattern","title","required","maxLength","Contact","onClick","deleteContact","id","ContactList","memoContacts","useMemo","map","Filter","onChange","inputValue","target","setStatusFilter","Contacts","useEffect","fetchContacts","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}